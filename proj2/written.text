Project 2
written.text

Name: Eddy Zhang
Login ID: 1374331


Written #1:  How much time I spent on this assignment
-----------------------------------------------------

Please estimate of the amount of time you spent on this assignment
(each week) in hours, e. g., 6.5 hours.  Be as accurate as you can,
but we know you are not keeping a timer going: just give your best
estimate.

Week 1 time: 5 hours
Week 2 time:


Written #2:  How I tested my code
---------------------------------

Week 1 testing:

For Card class:
*******************************************************************************
*******************************************************************************
In main function:
    cout << "Making card: value 33" << endl;
    Card c33(33); 
    c33.debug_print();
    cout << endl;

    cout << "Making card: no value" << endl;
    Card c; 
    c.debug_print();
    cout << endl;

In terminal: 
sh compile_test_linked_list 
./test_linked_list 

Output:
Making card: value 33
 33 
Making card: no value
 NC 

Conclusion:
The constructor with/without value and 'value' function worked as expected.
*******************************************************************************
*******************************************************************************

For CardLinkedList class:
*******************************************************************************
*******************************************************************************
In main function:
    cout << "Making linked list" << endl;
    CardLinkedList ll;
    ll.debug_print();

In terminal: 
sh compile_test_linked_list 
./test_linked_list

Output:
Making linked list
DEBUG: CardLinked List (num_cards = 0) [
  Index_num   Node Address  Face Value
]

Conclusion:
The constructor for a CardLinkedList worked as expected.
-------------------------------------------------------------------------------
In main function:
    cout << "Adding card 33, 34, and 35 to list" << endl;
    Card c34(34);
    Card c35(35);
    ll.add_card_at(0, c33); 
    ll.add_card_at(1, c35);
    ll.add_card_at(1, c34);
    ll.debug_print();
    cout << "Get the card at index 2" << endl;
    cout << ll.get_card_at(2).value() << endl;

In terminal: 
sh compile_test_linked_list 
./test_linked_list

Output:
Adding card 33, 34, and 35 to list
DEBUG: CardLinked List (num_cards = 3) [
  Index_num   Node Address  Face Value
        0        0x657c20        33 
        1        0x657c60        34 
        2        0x657c40        35 
]
Get the card at index 2
35

Conclusion:
The add/get function for a CardLinkedList worked as expected.
-------------------------------------------------------------------------------
In main function:
    cout << "remove the second card" << endl;
    ll.remove_card_at(1);
    cout << "number of cards: " << ll.num_cards() << endl;
    ll.debug_print();
    cout << "remove the first card" << endl;
    ll.remove_card_at(0);
    cout << "number of cards: " << ll.num_cards() << endl;
    ll.debug_print();

In terminal: 
sh compile_test_linked_list 
./test_linked_list

Output:
Adding card 33, 34, and 35 to list
remove the second card
number of cards: 2
DEBUG: CardLinked List (num_cards = 2) [
  Index_num   Node Address  Face Value
        0       0x12e3c20        33 
        1       0x12e3c40        35 
]
remove the first card
number of cards: 1
DEBUG: CardLinked List (num_cards = 1) [
  Index_num   Node Address  Face Value
        0       0x12e3c40        35 
]

Conclusion:
The remove/num function for a CardLinkedList worked as expected.
-------------------------------------------------------------------------------
All the functions work!
*******************************************************************************
*******************************************************************************

For Deck class:
*******************************************************************************
*******************************************************************************
In main function:
    cout << "Making a deck with card 33" << endl;
    Card c33(33); 
    Deck deck(c33);
    deck.debug_print();

In terminal: 
sh compile_test_deck 
./test_deck 

Output:
Making a deck with card 33
DEBUG: CardLinked List (num_cards = 1) [
  Index_num   Node Address  Face Value
        0       0x1f84c20        33 
]

Conclusion:
The default constructor for Deck class worked as expected.
-------------------------------------------------------------------------------
In main function:
    int main(int argc, char *argv[])
{
    if (argc != 2){
        cerr << "ERROR: You must provide the name of the file." << endl;
        return 1;}
    string filename = argv[1];
    Deck deck(filename);
    deck.debug_print();
    return 0;
}

In terminal: 
sh compile_test_deck 
./test_deck shuffled_deck1.txt 

Output:
DEBUG: CardLinked List (num_cards = 20) [
  Index_num   Node Address  Face Value
        0        0x75deb0         1 
        1        0x75ded0         2 
        2        0x75def0        11 
        3        0x75df10        13 
        4        0x75df30         3 
        5        0x75df50         4 
        6        0x75df70        18 
        7        0x75df90         5 
        8        0x75dfb0        19 
        9        0x75dfd0        20 
       10        0x75dff0         6 
       11        0x75e010         8 
       12        0x75e030         9 
       13        0x75e050        10 
       14        0x75e070        12 
       15        0x75e090        14 
       16        0x75e0b0         7 
       17        0x75e0d0        15 
       18        0x75e0f0        16 
       19        0x75e110        17 
]

Conclusion:
The constructor that reads a file for Deck class worked as expected and the 
first card is on the top.
-------------------------------------------------------------------------------
In main function:
    int main(int argc, char *argv[])
{
    if (argc != 2){
        cerr << "ERROR: You must provide the name of the file." << endl;
        return 1;}
    string filename = argv[1];
    Deck deck(filename);
    cout << deck.number_of_cards() << endl;

    deck.inspect_top_card().debug_print();
    deck.debug_print();
    
    deck.draw_top_card().debug_print();
    deck.debug_print();

    Card c33(33);
    deck.put_card_on_top(c33);
    deck.debug_print();

    return 0;
}

In terminal: 
sh compile_test_deck 
./test_deck shuffled_deck_small.txt 

Output:
5
  2 DEBUG: CardLinked List (num_cards = 5) [
  Index_num   Node Address  Face Value
        0       0x1091eb0         2 
        1       0x1091ed0         4 
        2       0x1091ef0         3 
        3       0x1091f10         5 
        4       0x1091f30         1 
]
  2 DEBUG: CardLinked List (num_cards = 4) [
  Index_num   Node Address  Face Value
        0       0x1091ed0         4 
        1       0x1091ef0         3 
        2       0x1091f10         5 
        3       0x1091f30         1 
]
DEBUG: CardLinked List (num_cards = 5) [
  Index_num   Node Address  Face Value
        0       0x1091eb0        33 
        1       0x1091ed0         4 
        2       0x1091ef0         3 
        3       0x1091f10         5 
        4       0x1091f30         1 
]

Conclusion:
The number_of_cards, inspect_top_card, draw_top_card, and put_card_on_top for 
Deck class worked as expected.
*******************************************************************************
*******************************************************************************



Week 2 testing:


Written #3: Your comments on the project
----------------------------------------

Tell us what you learned from this project.  What did you like about
it? Do you have any suggestions for improving it? Did you enjoy it?
Fill in the first section after week 1, and then at the end of week
2 tell us how things looked then. Don't edit your week 1 comments
for week 2, but you are welcome to tell us in the second section
that you've changed your opinion!

Week 1 (tell us your thoughts after week 1):
It's good to learn how classes interact!


Week 2 (add additional comments after week 2):
